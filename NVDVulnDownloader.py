from os import path
from os import makedirs
from sys import exc_info

from datetime import date
from datetime import timedelta

from zipfile import ZipFile
from tempfile import TemporaryDirectory

import hashlib
import re
import requests

from config import NVD_DIR, NVD_FEED_ROOT, NVD_API_VERSION

from NVDHelper import get_nvd_years, nvd_file_basename, nvd_file_name, \
    nvd_file_path, nvd_uri

class NVDVulnDownloader:
    def __init__(self, start_date, end_date):
        self.nvd_dir = NVD_DIR
        self.nvd_feed_root = NVD_FEED_ROOT
        self.nvd_api_version = NVD_API_VERSION
        self.nvd_years = get_nvd_years(start_date, end_date)

    def create_dirs(self):
        if not (path.exists(self.nvd_dir) and path.isdir(self.nvd_dir)):
            try:
                makedirs(self.nvd_dir, mode=0o755, exist_ok=True)
            except:
                print("Error:", exc_info()[0])
                raise
    
    def sync_nvd_vulns(self, years):
        for year in years:
            base_f = nvd_file_basename(year)
            meta_f = nvd_file_name(base_f, "meta")
            json_f = nvd_file_name(base_f, "json")
            zip_f = nvd_file_name(base_f, "zip")

            if not (path.exists(nvd_file_path(json_f)) \
                and self.is_nvd_up2date(json_f, meta_f)):
                    # download zip to tempdir, extract to data/nvd
                    self.download_nvd_zip(zip_f)

    # helper methods
    def download_nvd_meta(self, filename):
        self.download_nvd_file(filename, nvd_file_path(filename))

    def download_nvd_zip(self, filename):
        # create a temp directory and download there
        with TemporaryDirectory() as td:
            zip_file = path.join(td, filename)
            self.download_nvd_file(filename,zip_file)
            self.unpack_nvd_archive(zip_file)

    def unpack_nvd_archive(self, zip_file):
        with ZipFile(zip_file, "r") as z:
            z.extractall(path=self.nvd_dir)

    def download_nvd_file(self, filename, dst):
        print(f"DEBUG: downloading file: {filename}")
        try:
            nvd_file = requests.get(nvd_uri(filename), allow_redirects=True)
        except requests.exceptions.RequestException:
            print("Error:", exc_info()[0])
            raise
        try:
            open(dst,'wb').write(nvd_file.content)
        except:
            print("Error:", exc_info()[0])
            raise

    def calc_sha256(self, filename, block_size=65536):
        sha256 = hashlib.sha256()
        with open(filename, "rb") as f:
            while True:
                data = f.read(block_size)
                if not data:
                    break
                sha256.update(data)
        return str.upper(sha256.hexdigest())
    
    def is_nvd_up2date(self, json_filename, meta_filename):
        # always download fresh meta file
        self.download_nvd_meta(meta_filename)
        with open(nvd_file_path(meta_filename), "r") as fp:
            for line in fp:
                m = re.search(r"sha256\:(?P<sha256>[0-9A-F]+)", line)
                if m:
                    sha256_from_meta = m.group('sha256')
                    break
        # calculate checksum of our json
        json_sha256 = self.calc_sha256(nvd_file_path(json_filename))
        return json_sha256 == sha256_from_meta
    
    # runner, you should really just need to call this one method
    def run(self):
        self.create_dirs()
        self.sync_nvd_vulns(self.nvd_years)
        
