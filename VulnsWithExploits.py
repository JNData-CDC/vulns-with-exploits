import json

from os import path
from datetime import datetime

from config import NVD_DIR
from NVDHelper import get_nvd_years, nvd_file_basename, nvd_file_name, nvd_file_path

class VulnsWithExploits:
    def __init__(self):
        self.nvd_dir = NVD_DIR
    
    def get_vulns_from_json(self, filepath):
        """Gets all the vulns from a single NVD json file with 'publishedDate' parameter within the specified dates

        Args:
            filepath (str): Path of a NVD json file

        Returns:
            set: A set containing IDs (CVE numbers) of all the vulns found in a single NVD json file within the date range
        """
        vulns = set()
        with open(filepath, mode="r", encoding="utf-8") as j:
            content = json.load(j)
        # ID: content["CVE_Items"][num]["cve"]["CVE_data_meta"]["ID"]
        # date: content["CVE_Items"][num]["publishedDate"]
        for item in content["CVE_Items"]:
            # get date, if within range, add to set
            publishedDate = datetime.strptime(item["publishedDate"], "%Y-%m-%dT%H:%MZ").date()
            if (self.start_date <= publishedDate <= self.end_date):
                vulns.add(item["cve"]["CVE_data_meta"]["ID"])
        return vulns

    def get_vuln_ids(self, start_date, end_date):
        """Gets all the vulns registered in NVD within the specified dates (based on 'publishDate' parameter from NVD)

        Args:
            start_date (datetime.date): start of the date range
            end_date (datetime.date): end of the date range

        Returns:
            set: A set containing IDs (CVE numbers) of all the vulns registered in NVD within the time range
        """
        self.start_date = start_date
        self.end_date = end_date
        vulns_total = set()
        for year in get_nvd_years(self.start_date, self.end_date):
            base_f = nvd_file_basename(year)
            json_f = nvd_file_name(base_f,"json")
            json_path = nvd_file_path(path.join(NVD_DIR, json_f))
            # add vulns to total
            vulns_total.update(self.get_vulns_from_json(json_path))
        return vulns_total
